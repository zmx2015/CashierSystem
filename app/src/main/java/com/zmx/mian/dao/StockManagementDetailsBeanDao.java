package com.zmx.mian.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zmx.mian.bean.StockManagementDetailsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STOCK_MANAGEMENT_DETAILS_BEAN".
*/
public class StockManagementDetailsBeanDao extends AbstractDao<StockManagementDetailsBean, Long> {

    public static final String TABLENAME = "STOCK_MANAGEMENT_DETAILS_BEAN";

    /**
     * Properties of entity StockManagementDetailsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property G_id = new Property(1, String.class, "g_id", false, "G_ID");
        public final static Property G_name = new Property(2, String.class, "g_name", false, "G_NAME");
        public final static Property G_price = new Property(3, String.class, "g_price", false, "G_PRICE");
        public final static Property G_total = new Property(4, String.class, "g_total", false, "G_TOTAL");
        public final static Property G_weight = new Property(5, String.class, "g_weight", false, "G_WEIGHT");
        public final static Property G_nb = new Property(6, String.class, "g_nb", false, "G_NB");
        public final static Property G_note = new Property(7, String.class, "g_note", false, "G_NOTE");
        public final static Property G_color = new Property(8, String.class, "g_color", false, "G_COLOR");
        public final static Property S_id = new Property(9, String.class, "s_id", false, "S_ID");
        public final static Property Supplier = new Property(10, String.class, "supplier", false, "SUPPLIER");
        public final static Property G_payment_mode = new Property(11, String.class, "g_payment_mode", false, "G_PAYMENT_MODE");
        public final static Property G_the_fare = new Property(12, String.class, "g_the_fare", false, "G_THE_FARE");
        public final static Property G_the_deposit = new Property(13, String.class, "g_the_deposit", false, "G_THE_DEPOSIT");
        public final static Property Number = new Property(14, String.class, "number", false, "NUMBER");
        public final static Property Unita = new Property(15, String.class, "unita", false, "UNITA");
    }


    public StockManagementDetailsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StockManagementDetailsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STOCK_MANAGEMENT_DETAILS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"G_ID\" TEXT," + // 1: g_id
                "\"G_NAME\" TEXT," + // 2: g_name
                "\"G_PRICE\" TEXT," + // 3: g_price
                "\"G_TOTAL\" TEXT," + // 4: g_total
                "\"G_WEIGHT\" TEXT," + // 5: g_weight
                "\"G_NB\" TEXT," + // 6: g_nb
                "\"G_NOTE\" TEXT," + // 7: g_note
                "\"G_COLOR\" TEXT," + // 8: g_color
                "\"S_ID\" TEXT," + // 9: s_id
                "\"SUPPLIER\" TEXT," + // 10: supplier
                "\"G_PAYMENT_MODE\" TEXT," + // 11: g_payment_mode
                "\"G_THE_FARE\" TEXT," + // 12: g_the_fare
                "\"G_THE_DEPOSIT\" TEXT," + // 13: g_the_deposit
                "\"NUMBER\" TEXT," + // 14: number
                "\"UNITA\" TEXT);"); // 15: unita
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STOCK_MANAGEMENT_DETAILS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StockManagementDetailsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String g_id = entity.getG_id();
        if (g_id != null) {
            stmt.bindString(2, g_id);
        }
 
        String g_name = entity.getG_name();
        if (g_name != null) {
            stmt.bindString(3, g_name);
        }
 
        String g_price = entity.getG_price();
        if (g_price != null) {
            stmt.bindString(4, g_price);
        }
 
        String g_total = entity.getG_total();
        if (g_total != null) {
            stmt.bindString(5, g_total);
        }
 
        String g_weight = entity.getG_weight();
        if (g_weight != null) {
            stmt.bindString(6, g_weight);
        }
 
        String g_nb = entity.getG_nb();
        if (g_nb != null) {
            stmt.bindString(7, g_nb);
        }
 
        String g_note = entity.getG_note();
        if (g_note != null) {
            stmt.bindString(8, g_note);
        }
 
        String g_color = entity.getG_color();
        if (g_color != null) {
            stmt.bindString(9, g_color);
        }
 
        String s_id = entity.getS_id();
        if (s_id != null) {
            stmt.bindString(10, s_id);
        }
 
        String supplier = entity.getSupplier();
        if (supplier != null) {
            stmt.bindString(11, supplier);
        }
 
        String g_payment_mode = entity.getG_payment_mode();
        if (g_payment_mode != null) {
            stmt.bindString(12, g_payment_mode);
        }
 
        String g_the_fare = entity.getG_the_fare();
        if (g_the_fare != null) {
            stmt.bindString(13, g_the_fare);
        }
 
        String g_the_deposit = entity.getG_the_deposit();
        if (g_the_deposit != null) {
            stmt.bindString(14, g_the_deposit);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(15, number);
        }
 
        String unita = entity.getUnita();
        if (unita != null) {
            stmt.bindString(16, unita);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StockManagementDetailsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String g_id = entity.getG_id();
        if (g_id != null) {
            stmt.bindString(2, g_id);
        }
 
        String g_name = entity.getG_name();
        if (g_name != null) {
            stmt.bindString(3, g_name);
        }
 
        String g_price = entity.getG_price();
        if (g_price != null) {
            stmt.bindString(4, g_price);
        }
 
        String g_total = entity.getG_total();
        if (g_total != null) {
            stmt.bindString(5, g_total);
        }
 
        String g_weight = entity.getG_weight();
        if (g_weight != null) {
            stmt.bindString(6, g_weight);
        }
 
        String g_nb = entity.getG_nb();
        if (g_nb != null) {
            stmt.bindString(7, g_nb);
        }
 
        String g_note = entity.getG_note();
        if (g_note != null) {
            stmt.bindString(8, g_note);
        }
 
        String g_color = entity.getG_color();
        if (g_color != null) {
            stmt.bindString(9, g_color);
        }
 
        String s_id = entity.getS_id();
        if (s_id != null) {
            stmt.bindString(10, s_id);
        }
 
        String supplier = entity.getSupplier();
        if (supplier != null) {
            stmt.bindString(11, supplier);
        }
 
        String g_payment_mode = entity.getG_payment_mode();
        if (g_payment_mode != null) {
            stmt.bindString(12, g_payment_mode);
        }
 
        String g_the_fare = entity.getG_the_fare();
        if (g_the_fare != null) {
            stmt.bindString(13, g_the_fare);
        }
 
        String g_the_deposit = entity.getG_the_deposit();
        if (g_the_deposit != null) {
            stmt.bindString(14, g_the_deposit);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(15, number);
        }
 
        String unita = entity.getUnita();
        if (unita != null) {
            stmt.bindString(16, unita);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StockManagementDetailsBean readEntity(Cursor cursor, int offset) {
        StockManagementDetailsBean entity = new StockManagementDetailsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // g_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // g_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // g_price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // g_total
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // g_weight
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // g_nb
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // g_note
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // g_color
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // s_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // supplier
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // g_payment_mode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // g_the_fare
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // g_the_deposit
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // number
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // unita
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StockManagementDetailsBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setG_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setG_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setG_price(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setG_total(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setG_weight(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setG_nb(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setG_note(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setG_color(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setS_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSupplier(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setG_payment_mode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setG_the_fare(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setG_the_deposit(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNumber(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUnita(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StockManagementDetailsBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StockManagementDetailsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StockManagementDetailsBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
