package com.zmx.mian.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zmx.mian.bean.StockManagementBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STOCK_MANAGEMENT_BEAN".
*/
public class StockManagementBeanDao extends AbstractDao<StockManagementBean, Long> {

    public static final String TABLENAME = "STOCK_MANAGEMENT_BEAN";

    /**
     * Properties of entity StockManagementBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Number = new Property(1, String.class, "number", false, "NUMBER");
        public final static Property Sm_time = new Property(2, String.class, "sm_time", false, "SM_TIME");
        public final static Property Rh_time = new Property(3, String.class, "rh_time", false, "RH_TIME");
        public final static Property Total = new Property(4, String.class, "total", false, "TOTAL");
        public final static Property Lockup = new Property(5, String.class, "lockup", false, "LOCKUP");
        public final static Property Sm_state = new Property(6, String.class, "sm_state", false, "SM_STATE");
    }


    public StockManagementBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StockManagementBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STOCK_MANAGEMENT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NUMBER\" TEXT," + // 1: number
                "\"SM_TIME\" TEXT," + // 2: sm_time
                "\"RH_TIME\" TEXT," + // 3: rh_time
                "\"TOTAL\" TEXT," + // 4: total
                "\"LOCKUP\" TEXT," + // 5: lockup
                "\"SM_STATE\" TEXT);"); // 6: sm_state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STOCK_MANAGEMENT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StockManagementBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(2, number);
        }
 
        String sm_time = entity.getSm_time();
        if (sm_time != null) {
            stmt.bindString(3, sm_time);
        }
 
        String rh_time = entity.getRh_time();
        if (rh_time != null) {
            stmt.bindString(4, rh_time);
        }
 
        String total = entity.getTotal();
        if (total != null) {
            stmt.bindString(5, total);
        }
 
        String lockup = entity.getLockup();
        if (lockup != null) {
            stmt.bindString(6, lockup);
        }
 
        String sm_state = entity.getSm_state();
        if (sm_state != null) {
            stmt.bindString(7, sm_state);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StockManagementBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(2, number);
        }
 
        String sm_time = entity.getSm_time();
        if (sm_time != null) {
            stmt.bindString(3, sm_time);
        }
 
        String rh_time = entity.getRh_time();
        if (rh_time != null) {
            stmt.bindString(4, rh_time);
        }
 
        String total = entity.getTotal();
        if (total != null) {
            stmt.bindString(5, total);
        }
 
        String lockup = entity.getLockup();
        if (lockup != null) {
            stmt.bindString(6, lockup);
        }
 
        String sm_state = entity.getSm_state();
        if (sm_state != null) {
            stmt.bindString(7, sm_state);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StockManagementBean readEntity(Cursor cursor, int offset) {
        StockManagementBean entity = new StockManagementBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // number
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sm_time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rh_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // total
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lockup
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // sm_state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StockManagementBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSm_time(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRh_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotal(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLockup(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSm_state(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StockManagementBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StockManagementBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StockManagementBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
