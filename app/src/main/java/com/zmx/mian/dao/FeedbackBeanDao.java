package com.zmx.mian.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zmx.mian.bean.FeedbackBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FEEDBACK_BEAN".
*/
public class FeedbackBeanDao extends AbstractDao<FeedbackBean, Long> {

    public static final String TABLENAME = "FEEDBACK_BEAN";

    /**
     * Properties of entity FeedbackBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Login_name = new Property(1, String.class, "login_name", false, "LOGIN_NAME");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property Admin_name = new Property(3, String.class, "admin_name", false, "ADMIN_NAME");
        public final static Property User_head = new Property(4, String.class, "user_head", false, "USER_HEAD");
        public final static Property Msg = new Property(5, String.class, "msg", false, "MSG");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
    }


    public FeedbackBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FeedbackBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FEEDBACK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LOGIN_NAME\" TEXT," + // 1: login_name
                "\"USER_ID\" TEXT," + // 2: user_id
                "\"ADMIN_NAME\" TEXT," + // 3: admin_name
                "\"USER_HEAD\" TEXT," + // 4: user_head
                "\"MSG\" TEXT," + // 5: msg
                "\"TIME\" TEXT," + // 6: time
                "\"TYPE\" TEXT);"); // 7: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FEEDBACK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FeedbackBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String login_name = entity.getLogin_name();
        if (login_name != null) {
            stmt.bindString(2, login_name);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String admin_name = entity.getAdmin_name();
        if (admin_name != null) {
            stmt.bindString(4, admin_name);
        }
 
        String user_head = entity.getUser_head();
        if (user_head != null) {
            stmt.bindString(5, user_head);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(6, msg);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FeedbackBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String login_name = entity.getLogin_name();
        if (login_name != null) {
            stmt.bindString(2, login_name);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String admin_name = entity.getAdmin_name();
        if (admin_name != null) {
            stmt.bindString(4, admin_name);
        }
 
        String user_head = entity.getUser_head();
        if (user_head != null) {
            stmt.bindString(5, user_head);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(6, msg);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FeedbackBean readEntity(Cursor cursor, int offset) {
        FeedbackBean entity = new FeedbackBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // login_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // admin_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_head
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // msg
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FeedbackBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLogin_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdmin_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_head(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMsg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FeedbackBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FeedbackBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FeedbackBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
